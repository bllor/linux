modules6

--------------------------------------------
커널

하드웨어와 소프트웨어의 인터페이스

hardware(cpu,memory)-kernel(program)-shell(gui,bash,csh)-application(browser)-user
로 구성되어있다.
운영체제는 kernel+shell에 속하며 리눅스 mac, window가 여기에 속한다.
software는 shell+application

--------------------------------------------
셸
셸은 유저와 커널/운영체제를 연결해주는 역할
명령어를 입력하여 사용하는 것이 쉘

셸찾는법
echo $0 or cat /etc/shells

windows gui linux sh,bash등이 shell에 속한다.

--------------------------------------------
gui의 종류는 gnome, kde가 있다
cli의 종류 sh, bash, csh, tcsh, ksh 
csh, tcsh는 c언어 기반이라서 c언어를 잘 사용하는 사람만 사용

--------------------------------------------
셸스크립트란 실행가능한 파일을 순차적으로 진행하는 것

셸스크립트는 처음에 shell로 시작하고 그 다음 comment, 명령어, 조건문 등장
셸스크립트도 실행권한이 필요하다
셸스크립트는 절대경로로 되어있어야한다.

셸스크립트를 입력할 때
#!/bin/bash 처럼 사용하는 shell을 적는 것이 좋다

셸스크립트가 실행이 가능해지면 색이 바뀐다.

셸스크립트에서는 변수를 사용할 수 있다

a= dongil

echo "my name is $a"를 하게 되면 my name is dongil로 출력된다
*변수에 띄워쓰기가 존재할 경우 ''로 감싸주어야 한다.

--------------------------------------------
스크립트 입력 및 출력
read - 입력 
echo - 출력

변수를 입력할 때 read를 통해 입력값을 받을 수 있다.
read name

echo hello $name
를 할경우
셸스크립트가 실행될 때 입력값을 name으로 저장하고, hello name으로 출력한다

변수에 명령어를 넣고 싶다면 ₩₩로 감싸야 한다.


--------------------------------------------

if 조건문
then
  조건과 일치할 때 사용할 코드
else
  조건과 다를 때 사용할 코드
fi

-eq는 같다를 뜻한다.

*
-e filename filename이 있는지 없는지 확인할 때 사용

--------------------------------------------

for loop

for i in 1 2 3 4 5
do 
echo $i
done
이렇게 할 경우 1,2,3,4,5를 출력하고 끝이 난다 

for i in 1 2 3 4 5 과 같이 쓸 수도 있지만
for i in {1..5}로 쓰는 것이 일반적일 것 같다

--------------------------------------------

while [condition]

do 
	command1
	command2
done

condition이 될 때까지 명령을 실시한다.

--------------------------------------------
case문

read choices

case $choices in 

var1 command1
var2 command2
var3 command3
* command4

esac

choices에 var1이 입력되면 그에 맞는 명령어가 실행된다.
var2가 입력될 경우 var2에 맞는 명령어가 실행되고
var1,2,3외에 다른 것이 입력되면 command4가 실행된다.

--------------------------------------------
원격서버 연결확인
 
명령어  & > /dev/null
--> 명령어의 결과가 출력되지 않는다


$(명령어) 명령어에 출력값을 변수로 사용할 수 있다.

* $? - 모든 결과값을 받는다
 
--------------------------------------------
명령어에 별명짓기
별명을 짓는 이유는 자주 사용하는 명령어를 치기 귀찮아서겠지?

alias 별명 = "명령어"
별명을 입력할 경우 명령어가 실행이 된다.
명령어에 변수가 존재한다면 \&변수처럼 \를 붙여주어야 한다.

alias를 입력한다면 모든 별명을 볼 수 있다.

unalias 별명--> 별명을 지우는 명령어

*
grep ^d
디렉터리를 조회하는 명령어

--------------------------------------------
별명은 서버가 다시시작되거나 다른 터미널로 접속하는 경우 사라진다.
별명을 만든 사용자에게만 적용되는 별명을 만들거나 모든 사용자가 사용할 수 있게 만들면 계속 유지할 수 있다.

User = /home/user/.bashrc
Global = /etc/bashrc

위의 경로로 이동한 뒤 
alias 별명 = '명령어'
를 입력해주면 별명생성자만 사용하거나 모든 사용자가 사용할 수 있는 별명을 만들게 된다.


--------------------------------------------
셸 히스토리
history --> 리눅스에서 사용했던 모든 명령어를 확인할 수 있다

기존에 사용했던 명령어를 다시 실행하고 싶으면
!명령어를 사용했던 번호



